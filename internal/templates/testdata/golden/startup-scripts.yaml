apiVersion: v1
kind: ConfigMap
metadata:
  name: startup-scripts-testuser
  labels:
    app: devenv-testuser
data:
  # Templated script - processed with config values
  startup.sh: |
#!/bin/bash
    # Container startup script for developer environment: testuser
    set -e
    
    # === ENVIRONMENT SETUP ===
    TARGET_UID=2000
    TARGET_GID=2000
    DEV_USERNAME="testuser"
    
    # Path configuration
    PYTHON_BIN_PATH=""
    PYTHON_PATH="${PYTHON_BIN_PATH}/python3"
    ENV_INIT_SCRIPT="/home/${DEV_USERNAME}/.devenv_init.sh"
    ENV_BASH_SCRIPT="/home/${DEV_USERNAME}/.devenv_bash.sh"
    
    echo "Starting container setup for user: ${DEV_USERNAME} (UID: ${TARGET_UID})"
    
    # === SYSTEM PACKAGE INSTALLATION ===
    echo "Installing core system packages..."
    apt-get update
    apt-get install -y sudo openssh-server
    
    # Install Homebrew dependencies if Homebrew will be installed
    
    echo "Section 1: Environment and system setup complete"
    
    # === USER MANAGEMENT ===
    echo "Setting up user: ${DEV_USERNAME}"
    
    # Create/rename group with target GID
    if id -g ${TARGET_GID} &>/dev/null; then
        echo "Renaming group ${TARGET_GID} to ${DEV_USERNAME}"
        groupmod -n ${DEV_USERNAME} $(id -gn ${TARGET_GID})
    else
        echo "Adding group ${DEV_USERNAME} with GID ${TARGET_GID}"
        groupadd -g ${TARGET_GID} ${DEV_USERNAME}
    fi
    
    # Create/rename user with target UID
    if id -u ${TARGET_UID} &>/dev/null; then
        echo "Renaming user ${TARGET_UID} to ${DEV_USERNAME}"
        usermod -l ${DEV_USERNAME} -s /bin/bash -d /home/${DEV_USERNAME} -g ${TARGET_GID} $(id -un ${TARGET_UID})
    else
        echo "Adding user ${DEV_USERNAME} with UID ${TARGET_UID}"
        useradd -u ${TARGET_UID} -m -s /bin/bash ${DEV_USERNAME}
    fi
    
    # Ensure home directory exists and has correct ownership
    mkdir -p "/home/${DEV_USERNAME}"
    chown ${DEV_USERNAME}:${DEV_USERNAME} "/home/${DEV_USERNAME}"
    
    echo "Section 2: User management complete"
    
    # === ADMIN PRIVILEGES ===
    echo "Setting up admin privileges for ${DEV_USERNAME}"
    usermod -aG sudo ${DEV_USERNAME}
    
    # Configure sudo to not require password
    echo "${DEV_USERNAME} ALL=(ALL) NOPASSWD:ALL" > /etc/sudoers.d/${DEV_USERNAME}
    chmod 440 /etc/sudoers.d/${DEV_USERNAME}
    
    echo "Section 3: Admin privileges complete"
    
    # === HOMEBREW INSTALLATION ===
    echo "Skipping Homebrew installation (disabled in config)"
    
    echo "Section 4: Homebrew installation complete"
    
    # === SSH SERVER SETUP ===
    echo "Setting up SSH server"
    
    # Install and configure SSH server
    mkdir -p /run/sshd
    
    # Set up SSH host keys with persistence
    mkdir -p /ssh_host_keys
    if [ -f /ssh_host_keys/ssh_host_rsa_key ]; then
        # Use existing host keys
        cp /ssh_host_keys/ssh_host_* /etc/ssh/
    else
        # Generate new host keys and store them
        ssh-keygen -A
        cp /etc/ssh/ssh_host_* /ssh_host_keys/
    fi
    
    # Ensure correct permissions on host keys
    chmod 600 /etc/ssh/ssh_host_*
    chmod 644 /etc/ssh/ssh_host_*.pub
    
    # Set up SSH authorized keys for the developer
    mkdir -p /home/${DEV_USERNAME}/.ssh
    echo "ssh-rsa AAAAB3NzaC1yc2EAAAADAQABAAABgQC7... testuser@example.com
    ssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAI... testuser2@example.com
    " > /home/${DEV_USERNAME}/.ssh/authorized_keys
    chmod 700 /home/${DEV_USERNAME}/.ssh
    chmod 600 /home/${DEV_USERNAME}/.ssh/authorized_keys
    chown -R ${DEV_USERNAME}:${DEV_USERNAME} /home/${DEV_USERNAME}/.ssh
    
    echo "Section 5: SSH server setup complete"
    
    # === PACKAGE INSTALLATION ===
    echo "Installing APT packages: vim curl"
    apt-get install -y vim curl
    
    # Install common python packages from requirements.txt
    if [ -f /scripts/requirements.txt ]; then
        echo "Installing Python packages from requirements.txt"
        /bin/bash /scripts/run_with_git.sh ${DEV_USERNAME} ${PYTHON_PATH} -m pip install --no-user --no-cache-dir -r /scripts/requirements.txt
    fi
    echo "Installing Python packages: numpy pandas"
    /bin/bash /scripts/run_with_git.sh ${DEV_USERNAME} ${PYTHON_PATH} -m pip install --no-user --no-cache-dir numpy pandas
    
    echo "Section 6: Package installation complete"
    
    # === USER ENVIRONMENT SETUP ===
    # Set up environment for the user
    if [ -f /env-setup/setup.sh ]; then
        echo "Running user environment setup script"
        sudo -u ${DEV_USERNAME} \
            GIT_USER_NAME="Test User" \
            GIT_USER_EMAIL="testuser@example.com" \
            ENV_BASH_SCRIPT=${ENV_BASH_SCRIPT} \
            ENV_INIT_SCRIPT=${ENV_INIT_SCRIPT} \
            PYTHON_BIN_PATH=${PYTHON_BIN_PATH} \
            bash /env-setup/setup.sh
    fi
    
    if [ -f "${ENV_INIT_SCRIPT}" ]; then
        echo "Running custom init script"
        if ! (set +e; sudo -u ${DEV_USERNAME} bash -c "cd /home/${DEV_USERNAME} && bash ${ENV_INIT_SCRIPT}"); then
            echo "Warning: init.sh script failed, but continuing startup..."
        fi
    fi
    
    echo "Section 7: User environment setup complete"
    
    # === VSCODE CONFIGURATION ===
    
    # # Add default VSCode remote machine config, setting default python path
    # mkdir -p /home/${DEV_USERNAME}/.vscode-server/data/Machine
    # echo "{\"python.defaultInterpreterPath\": \"${PYTHON_PATH}\"}" > /home/${DEV_USERNAME}/.vscode-server/data/Machine/settings.json
    # Make sure .vscode-server directory is owned by ${DEV_USERNAME}
    chown -R ${DEV_USERNAME}:${DEV_USERNAME} /home/${DEV_USERNAME}/.vscode-server
    
    echo "Section 8: VSCode configuration complete"
    
    # === SSH SERVER LAUNCH ===
    echo "Starting SSH server"
    /usr/sbin/sshd -D
  
  # Static utility scripts - included as-is
  run_with_git.sh: |
#!/bin/bash
    #
    # run_with_git - Run commands as another user with temporary Git credentials
    #
    # Usage: run_with_git.sh <username> <command> [arguments...]
    
    set -e
    
    if [ $# -lt 2 ]; then
      echo "Usage: $0 <username> <command> [arguments...]"
      exit 1
    fi
    
    # Get the target user and remove it from the arguments
    TARGET_USER="$1"
    shift
    
    # Find the absolute path to git to ensure consistent behavior
    GIT_PATH=$(which git)
    
    # Build the command string preserving argument structure
    CMD_STR=""
    for arg in "$@"; do
      # Properly escape each argument
      CMD_STR="$CMD_STR \"${arg//\"/\\\"}\""
    done
    
    # Create the command to run as the other user
    if [ -n "$GITHUB_TOKEN" ]; then
      # Create a temporary credentials file with secure permissions
      TEMP_CRED_FILE=$(mktemp -t git-cred-XXXXXX)
      chmod 600 "$TEMP_CRED_FILE"
      
      # Store GitHub token in credential file
      echo "https://x-access-token:$GITHUB_TOKEN@github.com" > "$TEMP_CRED_FILE"
      
      # Clean up the file regardless of how script exits
      trap 'rm -f "$TEMP_CRED_FILE"' EXIT
      
      sudo -u "$TARGET_USER" bash -c "
        # Save original Git credential helper
        ORIGINAL_HELPER=\$($GIT_PATH config --global credential.helper 2>/dev/null || echo '')
        
        # Set up file-based credential helper
        $GIT_PATH config --global credential.helper \"store --file=$TEMP_CRED_FILE\"
        
        # Clean up Git config on exit
        trap '$GIT_PATH config --global credential.helper \"\$ORIGINAL_HELPER\" 2>/dev/null || $GIT_PATH config --global --unset credential.helper' EXIT
        
        # Run the command
        $CMD_STR
      "
    else
      # If GITHUB_TOKEN is not set, just run the command as the user
      echo "GITHUB_TOKEN not set, running command without git credential helper"
      sudo -u "$TARGET_USER" bash -c "$CMD_STR"
    fi
  
  # Static requirements file
  requirements.txt: |
# Common Python packages for scientific computing
    # This file contains baseline packages that are installed in all environments
    
    # Core scientific stack
    numpy>=1.24.0
    pandas>=2.0.0
    scipy>=1.10.0
    matplotlib>=3.7.0
    
    # Jupyter ecosystem
    jupyter>=1.0.0
    jupyterlab>=4.0.0
    ipywidgets>=8.0.0
    
    # Development tools
    black>=23.0.0
    pytest>=7.0.0
    mypy>=1.0.0
    
    # Data handling
    requests>=2.28.0
    h5py>=3.8.0
    openpyxl>=3.1.0
    
    # Machine learning (common packages)
    scikit-learn>=1.3.0